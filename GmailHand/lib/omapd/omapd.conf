<?xml version="1.0"?>
<omapd_configuration xmlns="http://config.omapd.org" version="2.0">
  <!-- plugin path relative to directory from which omapd is run -->
  <!--
  <map_graph_plugin_path>./plugins/libRAMHashTables.so</map_graph_plugin_path>
  -->

  <!-- If you provide paths to these standard schemas, they will be used
       to validate published standard metadata.
  -->
  <ifmap_metadata_v11_schema_path>ifmap-metadata-1.0v23.xsd</ifmap_metadata_v11_schema_path>
  <ifmap_metadata_v20_schema_path>ifmap-metadata-2.0r25.xsd</ifmap_metadata_v20_schema_path>

  <!-- log_file_location: leave empty to disable logging to file -->
  <!-- default is append="yes" -->
  <log_file_location append="yes">omapd.log</log_file_location>

  <!-- if enable="no" omapd will NOT log messages to stderr -->
  <log_stderr enable="yes"/>

  <!--
      ShowClientOps = 0x0001,
      ShowXML = 0x0002,
      ShowHTTPHeaders = 0x0004,
      ShowHTTPState = 0x0008,
      ShowXMLParsing = 0x0010,
      ShowXMLFilterResults = 0x0020,
      ShowXMLFilterStatements = 0x0040,
      ShowMAPGraphAfterChange = 0x0080,
      ShowRawSocketData = 0x0100,
      ShowSearchAlgorithm = 0x0200,
      ShowPluginOperations = 0x0400,
      ShowManagementRequests = 0x0800
  -->
  <!-- debug_level is a OR combination of the above hex flags.  Do the math! -->
  <!-- <debug_level> default is 0x0000 (no debugging) -->
  <debug_level>0000</debug_level>

  <!-- Management interface configuration for omapd. -->
  <!-- default is enable="yes" -->
  <management_configuration enable="yes">
    <!-- You are advised against using anything besides localhost for the
         management address, since it is an unauthenticated interface. -->
    <!-- <address> default is QHostAddress::LocalHost -->
    <address>127.0.0.1</address>
    <!-- <port> default is 8097 -->
    <port>8097</port>

    <!-- Management Interface Documentation -->
    <!-- For now, output is sent to the configured log location(s). -->
    <!-- Management requests are JSON formatted. -->
    <!-- Supported commands
         * Dump contents of map graph database
           { "cmd":"mapdump" }
         * Add a certificate-based client.  A missing authorization value will apply
           default authorization, as defined in the client_configuration section.
           A missing metadataPolicy value will not apply a metadata policy.
           { "cmd":"addCertClient",
             "type":"clientType",                 clientType:= {single, CA}
             "name":"clientName",
             "certPath":"/path/to/clientCert",
             "caPath":"/path/to/clientCACert",
             "authorization":"authzValue",        (optional)
             "metadataPolicy":"policyName"        (optional)
           }
         * Remove a certificate-based client.
           { "cmd":"removeCertClient",
             "type":"clientType",                 clientType:= {single, CA}
             "certPath":"/path/to/clientCert",
             "caPath":"/path/to/clientCACert"
           }
         * Blacklist a certificate-based client under a CA.  Prevent this client from
           connecting to omapd.  Note that this command only makes sense for clients
           connecting under a CA client configuration.  This command returns success as
           long as the certificates exist and are valid.
           { "cmd":"addCertClientToBlacklist",
             "certPath":"/path/to/clientCert",
             "caPath":"/path/to/clientCACert"
           }
         * Remove a client from the blacklist.  Note that this command only makes sense for clients
           connecting under a CA client configuration.  This command returns success as
           long as the certificates exist and are valid.
           { "cmd":"removeCertClientFromBlacklist",
             "certPath":"/path/to/clientCert",
             "caPath":"/path/to/clientCACert"
           }
    -->
    <!-- Example usages:
         echo '{"cmd":"mapdump"}' | nc localhost 8097
         echo '{"cmd":"addCertClient","type":"single","name":"clientName","certPath":"/path/to/clientCert","caPath":"/path/to/clientCAChain","authorization":"0x1E","metadataPolicy":"policyName"}' | nc localhost 8097
         echo '{"cmd":"removeCertClient","type":"single","certPath":"/path/to/clientCert","caPath":"/path/to/clientCAChain"}' | nc localhost 8097
         echo '{"cmd":"addCertClientToBlacklist","certPath":"/path/to/clientCert","caPath":"/path/to/clientCAChain"}' | nc localhost 8097
         echo '{"cmd":"removeCertClientFromBlacklist","certPath":"/path/to/clientCert","caPath":"/path/to/clientCAChain"}' | nc localhost 8097
    -->
  </management_configuration>

  <service_configuration>
    <!--
	SupportIfmapV10 = 0x01,
	SupportIfmapV11 = 0x02
	SupportIfmapV20 = 0x04
    -->
    <!-- ifmap_version_support is a OR combination of the above hex flags.  Do the math! -->
    <!-- default is 07 -->
    <version_support>07</version_support>

    <!-- <address> default is QHostAddress::Any -->
    <address>0.0.0.0</address>
    <!-- <port> default is 8096 -->
    <port>8096</port>

    <!-- if enable="no" all the <ssl_configuration> child elements will be ignored -->
    <!-- default is enable="no" -->
    <ssl_configuration enable="yes">
      <!-- format attribute values = {pem | der} -->
      <certificate_file format="pem">server.pem</certificate_file>

      <!-- use attribute password="password" to set private_key password -->
      <private_key_file>server.key</private_key_file>
    </ssl_configuration>

    <!-- enable="yes" creates a client configurations based on the http
         basic auth value if present, or else the client's src IP address. -->
    <!-- default is enable="yes" -->
    <create_client_configurations enable="no"/>

    <!-- enable="yes" allows clients to connect with basic auth username
		 and password. Disabling this will only allow clients to connect 
		 with certificates -->
    <!-- default is enable="yes" -->
	<allow_basic_auth_clients allow="yes"/>

    <!-- allow="yes" allows clients to connect without providing HTTP Basic Auth
         _or_ HTTPS Client certificate -->
    <!-- default is allow="no" -->
    <allow_unauthenticated_clients allow="no"/>

    <!-- allow="yes" allows curl to easily be used to slurp in MAP data -->
    <!-- default is allow="no" -->
    <allow_invalid_session_id allow="no"/>

    <!-- allow="yes" allows clients to use the SSRC channel for ARC requests
         in a non-standard mode. -->
    <!-- default is allow="no" -->
    <allow_arc_on_ssrc allow="no"/>

    <!-- session lifetime metadata timeout after clients disconnect without an
         explicit endSession. -->
    <!-- default is 180 seconds -->
    <!-- use 0 to disable the timeout -->
    <session_metadata_timeout>180</session_metadata_timeout>

    <!-- send TCP keepalives to clients. -->
    <!-- enable="yes" enables TCP keepalives on socket connections.  The 
         keepalive values are based on system settings -->
    <!-- default is enable="no" -->
    <send_tcp_keepalives enable="no"/>
  </service_configuration>

  <!-- Define metadata policies to apply to clients for publish operations.
       These policies must each have a unique name and the policies must be defined
       prior to using the policies in client definitions.
  -->
  <metadata_policies>
    <metadata_policy name="policy1">
      <metadata name="metaname1" metaNS="meta.ns.1"/>
    </metadata_policy>
    <metadata_policy name="policy2">
      <metadata name="metaname1" metaNS="meta.ns.1"/>
      <metadata name="metaname2" metaNS="meta.ns.1"/>
      <metadata name="metaname3" metaNS="meta.ns.1"/>
      <metadata name="metaname3" metaNS="meta.ns.2"/>
    </metadata_policy>
  </metadata_policies>

  <!-- Define specific authorized clients 
       The default authorization for all clients can be specified with the 
       default-authorization attribute.  The default value for the default-authorization
       attribute is 00 (DenyAll).
  -->
  <!--
    DenyAll = 0x00,
    AllowPublish = 0x01,
    AllowSearch = 0x02,
    AllowSubscribe = 0x04,
    AllowPoll = 0x08,
    AllowPurgeSelf = 0x10,
    AllowPurgeOthers = 0x20,
    AllowAll = 0x3F
  -->
  <client_configuration default-authorization="3F">
    <!-- client can do anything except purge others -->
    <client name="client1" authorization="1F" authentication="basic">
      <username>mapclient</username>
      <password>mapclient</password>
    </client>
    <!-- client can do anything except purge others -->
    <client name="client2" authorization="1F" authentication="basic">
      <username>helper</username>
      <password>mapclient</password>
    </client>
    <!-- read-only client with basic auth -->
    <client name="client3" authorization="0E" authentication="basic">
      <username>reader</username>
      <password>reader</password>
    </client>
    <!-- policy-constrained client with basic auth -->
    <client name="client3" authorization="1F" authentication="basic" metadata_policy="policy1">
      <username>policy</username>
      <password>policy</password>
    </client>
    <!-- read-only client with cert auth -->
	<!--
    <client name="client4" authorization="0E" authentication="certificate" metadata_policy="policy1">
      <certificate_file format="pem">filename</certificate_file>
      <ca_certificates_file format="pem">cacerts.pem</ca_certificates_file>
    </client>
	-->
    <!-- In the following example, clients are automatically created if they 
	 provide certificates issued by the issuing CA Certificate, and are given
	 the specified authorization.  Note that the issuing CA Cert should also be
     included in the CA Certificates file.
    -->
    <!-- In the following example, specific client identities can be blacklisted
	 from authenticating under the given CA certificate by specifying the optional
	 blacklist_directory element.  Omapd will parse the certificates in this directory
     and add them to the list of blacklisted clients.  Multiple CA Certificate client
     configurations can use the same blacklist directory; the directory will be processed
     each time, but only a single blacklist entry will be created for each certificate
     in the blacklist directory.  Note that this directory will be read only once upon 
     omapd startup.
    -->
	<!--
    <client name="ca-client-" authorization="1F" authentication="ca-certificate" metadata_policy="policy2">
      <issuing_ca_certificate_file format="pem">issuing-cacert.pem</issuing_ca_certificate_file>
      <ca_certificates_file format="pem">client-cacert.pem</ca_certificates_file>
      <blacklist_directory>/path/to/blacklisted/certs</blacklist_directory>
    </client>
	-->
  </client_configuration>
</omapd_configuration>
