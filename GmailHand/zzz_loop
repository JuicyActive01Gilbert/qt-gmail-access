


             int docend = chunkmiles;
                Position = Mfull_A.indexOf(tkey, Position);  /// here + 2
                if (Position !=-1 ) {
                     int NextendPosition_a = Mfull_A.indexOf(zkey, Position +2);
                     int NextendPosition_b = Mfull_A.indexOf(tkey, Position +2);
                     NextendPosition = qMax(NextendPosition_a,NextendPosition_b);
                     if ( NextendPosition > 1) {
                         /// the end of doc found :-) 
                         docend = NextendPosition;
                     }
                }
                int docmilesremain = chunkmiles - Position - 200;
                const int c_pos = Position;
                QByteArray tmpa = Mfull_A.mid(c_pos - 2,docend + 2); /// +2 can not find next key!! on this self chunk
                const QString md5 = partmd5(tmpa, c_pos); // only one time make
                out << Position << ":" << docend << ":" << chunkmiles << "< pos sum:" << modelist << " md5:" << md5
                        << "  \n" << key << "\n";
                /// goodeep
                QStringList xdeep = _multipart_resolver(tmpa);
                if (xdeep.size() > 1 && goodeep) {
                    out << "Risolve in basso -------------\n";
                    QString nextkey = _onekey_resolver(tmpa);
                    out << str.fill('.', _IMAIL_MAXL_) << "\n";
                    out << nextkey << " next key \n";
                    out << str.fill('.', _IMAIL_MAXL_) << "\n";
                } else if (xdeep.size() > 1 && !goodeep) {
                    out << "Non puoi deep -------------\n";
                }
                QByteArray schowOnly = tmpa.mid(0, (76 * 22));

                out << _format_string(QString(schowOnly.simplified().constData())) << "\n";
                out << str.fill('z', _IMAIL_MAXL_) << "\n";
                if ( docend != chunkmiles) {
                    Position = docend;
                }



int Parser::CaptureText(ICmail& qmail, const int mode) const {
        ///  const int recpos = pos - range;
        QTextStream out(stdout);
        QString str('*');

        QStringList keyheaderlist = GetMailKey();
        QStringList full_list = GetMailKey(true);
        QStringList current_bound;
        if (mode != 100) {
            return -1;
        }
        bool swapdocmode = false;
        const int modelist = keyheaderlist.size();
        const int modelistfull = full_list.size();
        int checksize = qMax(modelistfull, modelist);
        if (checksize == 0) {
            QString hdemsgerrorep = QString("Unable to find key boundary!");
            out << str.fill('.', _IMAIL_MAXL_) << "\n";
            out << hdemsgerrorep << "  \n";
            out << str.fill('.', _IMAIL_MAXL_) << "\n";
            out.flush();
            return -1;
        }

        if (modelist != modelistfull) {
            swapdocmode = true;
            //// possible error 
            if (full_list.size() > 0) {
                const QString testkey = QString("--%1").arg(QString(full_list.at(0)));
                int checkerpos = Mfull_A.indexOf(testkey, 0);
                if (checkerpos == -1) {
                    QString hdemsgerrorep1 = QString("Unable to find key boundary = {%1} ! Check yourself from mail.").arg(testkey);
                    out << str.fill('.', _IMAIL_MAXL_) << "\n";
                    out << hdemsgerrorep1 << "  \n";
                    out << str.fill('.', _IMAIL_MAXL_) << "\n";
                    out.flush();
                    return -1;
                }

            }
            current_bound = GetMailKey(true);
        } else {
            current_bound = GetMailKey();
        }

        const int chunkmiles = Mfull_A.length();
        /// end from file having _FILECLOSER_ chars must having!!!
        const int LASTPOSITIONFROMMAIL = Mfull_A.indexOf(_FILECLOSER_, 0);
        if (LASTPOSITIONFROMMAIL == -1) {
            out << "App Error _FILECLOSER_ Not found!\n";
            out.flush();
            return -1;
        }
        QString hdeep = QString("No go deep... :-( ...");
        bool goodeep = false;
        if (current_bound.size() == 1) {
            hdeep = QString("Pleas go deep down in the black see... :-) ...");
            goodeep = true;
        } else if (current_bound.size() == 2) {
            hdeep = QString("All doc here no deep... :-)   ...");
            goodeep = false; /// not having more as 2 key!!!
        }
        out << hdeep << "\n";
        out << "ListaFull:" << modelistfull << " Lista attuale:" << modelist << "\n";
        if (swapdocmode) {
            out << "Swap list ok..  \n";
        }

        int maxPosi = 0;
        int minPosi = 0;
        //// /Users/pro/project/version_sv/GmailHand/

        for (int i = 0; i < current_bound.size(); ++i) {
            const QString key = QString(current_bound.at(i));
            const QString tkey = QString("--%1").arg(key);
            const QString zkey = QString("--%1--").arg(key);


            int Position = 0;
            int NextendPosition =-1;
            ///do {
   

            /// } while (Position == !-1);

        }
        out << str.fill('.', _IMAIL_MAXL_) << "\n";
        out.flush();
        /*   ----------------------------------------  */
        //// QByteArray *xml = new QByteArray();


        qFatal("SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN SCAN");
        return -1;
    }
    //// best solution but must send 2 boundary to grep each part from multipart mixed



//
// C++ Implementation: Get Mail as search result by subject & date since imap.
//
// Description:
// Target to having a console app to filter & get mail to insert on drupal as new node.
//
// Author: Peter Hohl <pehohlva@gmail.com>,    19.9.2013
// http://www.freeroad.ch/
// Copyright: See COPYING file that comes with this distribution

#include <QCoreApplication>
#include "net_starterimap.h"

#define _PROGRAM_NAME_ "Mail console Reader di Peter Hohl"
#define _PROGRAM_NAME_DOMAINE_ "freeroad.ch"
#define _ORGANIZATION_NAME_ "PPK-Webprogramm"

/*  basic   */
#include <QtCore/QCoreApplication>
#include <QTimer>
#include <QTextStream>
#include <QDebug>
#include <QTextStream>

/*  network  */
#include <QtNetwork/QHostAddress>
#include <QtNetwork/QSslError>
#include <QtNetwork/QSslSocket>
/// cd /Users/pro/Desktop/Qt_project/GmailHand/
/// /Users/pro/Desktop/Qt_project/GmailHand/

int main(int argc, char *argv[]) {
    QCoreApplication app(argc, argv); //renamed the a to app
    /// console app 
    app.setOrganizationName(_ORGANIZATION_NAME_);
    app.setOrganizationDomain(_PROGRAM_NAME_DOMAINE_);
    app.setApplicationName(_PROGRAM_NAME_);

    QStringList localip;
    QTextStream out(stdout);
    QString str("*");
    out << str.fill('*', _IMAIL_WIDTH_) << "\n";

#if !defined(Q_OS_WIN)
    ReadMail::StreamMail *readtest = new ReadMail::StreamMail();
    out << "Free Home DiskSpace:" << readtest->freeSpaceHome() << "\n";
    out << str.fill('*', _IMAIL_WIDTH_) << "\n";
#endif

    foreach(QNetworkInterface interface, QNetworkInterface::allInterfaces()) {
        if (interface.flags().testFlag(QNetworkInterface::IsUp) &&
                !interface.flags().testFlag(QNetworkInterface::IsLoopBack)) {

            foreach(QNetworkAddressEntry entry, interface.addressEntries()) {
                if (interface.hardwareAddress() != "00:00:00:00:00:00" && entry.ip().toString().contains(".")) {
                    localip.append(entry.ip().toString());
                    out << interface.name() + " " + entry.ip().toString() + " " + interface.hardwareAddress() << "\n";
                }
            }
        }
    }

    out << localip.join(" - ") << "\n";
    out << "Online ok. Valid local ip to connect\n" << str.fill('*', _IMAIL_WIDTH_) << "\n";
    out.flush();

    if (localip.size() < 1) {
        out << "Offline Computer!\n" << str.fill('*', _IMAIL_WIDTH_) << "\n";

        out.flush();
        return 1;
    }
    /// param to init class 
    QString search_word, username, password;
    int dayback = -3; ///  to search since date searchword query.
    /// imap cmd:  //// UID SEARCH SUBJECT \"foto\" SINCE 20-Sep-2013



    if (username.isEmpty()) {
        out << "Please enter word to search on mail subject:\n";
        out.flush();
        QTextStream in(stdin);
        out.flush();
        search_word = in.readLine(); /// here new word to insert on class...

        out << "Please enter Gmail username:\n";
        out.flush();
        username = in.readLine();

        out << "Please enter Gmail PASSWORD:\n";
        out.flush();
        password = in.readLine();
    }


    QString word("pressrelease");
    if (!search_word.isEmpty()) {
        word = search_word;
    }

    if (password.isEmpty() or username.isEmpty()) {
        out << "No user or pass: NO JOB! By\n";
        out.flush();
        return 1;
    }


    if (QSslSocket::supportsSsl()) {
        qDebug() << "ssl supportsSsl ok main \n";
        Net_StarterImap *imap = new Net_StarterImap();
        imap->SearchWord(word, dayback);
        imap->Connect(username, password);
        QObject::connect(imap, SIGNAL(Exit_Close()), &app, SLOT(quit()));
    } else {
        qDebug() << "ssl notSupported :-( main \n";
    }

    QTimer::singleShot(10000, &app, SLOT(quit()));
    return app.exec();
}
